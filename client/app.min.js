"use strict";
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var SchematicsAPI = (function () {
  function SchematicsAPI(apiURL) {
    _classCallCheck(this, SchematicsAPI);

    this.apiURL = apiURL + '/schematics';
  }

  _createClass(SchematicsAPI, [{
    key: 'reload',
    value: function reload(callback) {
      axios.get(this.apiURL + '?' + Date.now()).then(function (response) {
        if (callback && typeof callback === 'function') callback(null, response.data);
      })['catch'](function (error) {
        console.log(error);
        if (callback && typeof callback === 'function') callback(error, null);
      });
    }
  }, {
    key: 'getDownloadURL',
    value: function getDownloadURL(file) {
      return this.apiURL + '/' + file + '/download';
    }
  }, {
    key: 'uploadFile',
    value: function uploadFile(file, props, callback) {
      var data = new FormData();
      for (var k in props) {
        data.append(k, props[k]);
      }
      data.append('sch_file', file);

      axios.post(this.apiURL + '/upload', data).then(function (response) {
        if (callback && typeof callback == 'function') callback(null, response);
      })['catch'](function (error) {
        console.log(error);
        if (callback && typeof callback == 'function') callback(error, null);
      });
    }
  }, {
    key: 'deleteFile',
    value: function deleteFile(file, delete_key, callback) {
      var data = new FormData();
      data.append('delete_key', getHashedDeleteKey(delete_key));
      axios['delete'](this.apiURL + '/' + file, {
        data: data
      }).then(function (response) {
        if (callback && typeof callback == 'function') callback(null, response);
      })['catch'](function (error) {
        console.log(error);
        if (callback && typeof callback == 'function') callback(error, null);
      });
    }
  }]);

  return SchematicsAPI;
})();

var schematicsAPI = new SchematicsAPI('./api');
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var __UploadSchematicItem_Template = null; // スタティックプロパティ代わり

var UploadSchematicItem = (function () {
  _createClass(UploadSchematicItem, null, [{
    key: 'loadSUITemplate',
    value: function loadSUITemplate() {
      axios('./sch-upload-item-template.html?' + Date.now()).then(function (response) {
        UploadSchematicItem.Template = $($(response.data).get(0));
      });
    }
  }, {
    key: 'Template',
    get: function get() {
      return __UploadSchematicItem_Template;
    },
    set: function set(template) {
      __UploadSchematicItem_Template = template;
    }
  }]);

  function UploadSchematicItem(id, file) {
    var duplicateFile = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
    var enabledDeleteKey = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

    _classCallCheck(this, UploadSchematicItem);

    if (!UploadSchematicItem.Template) throw new Error('Unloaded template data.');

    // テンプレートのクローンを作成
    this.template = $(UploadSchematicItem.Template.clone());

    // メンバ変数初期化
    this.newFilename = null;
    this.DuplicateFile = duplicateFile;
    this.uploading = false; // TODO: 状態遷移を実装
    this.enabledDeleteKey = enabledDeleteKey;

    if (arguments.length > 0) this.Id = id;
    if (arguments.length > 1) {
      this.filedata = file;
      this.Filename = file.name;
    }
    if (arguments.length > 2) this.isDuplicateFile = false;

    // 各イベントの設定
    this.setLocalEventHandler();
  }

  _createClass(UploadSchematicItem, [{
    key: 'getJQueryObject',
    value: function getJQueryObject() {
      // 各種レンダリング
      this.template.data('id', this.Id);
      $('p.filename strong', this.template).text(escapeHtml(this.Filename));

      // 各フォームのIDを設定
      $('.form-group.title label', this.template).attr('for', this.Id + '-title');
      $('.form-group.title input', this.template).attr('id', this.Id + '-title');

      $('.form-group.description label', this.template).attr('for', this.Id + '-description');
      $('.form-group.description textarea', this.template).attr('id', this.Id + '-description');

      $('.form-group.delete-key label', this.template).attr('for', this.Id + '-delete-key');
      $('.form-group.delete-key input', this.template).attr('id', this.Id + '-delete-key');

      // タイトルのバリデーションチェックを実行
      $('input[name=title]', this.template).trigger('blur');

      // ボタンの状態を更新
      this.updateButtonStatus();

      return this.template;
    }
  }, {
    key: 'performUpload',
    value: function performUpload(filedata, props) {
      var _this = this;

      // TODO: filename差し替え処理を追加
      schematicsAPI.uploadFile(filedata, props, function (error, responce) {
        if (error) {
          _this.template.trigger('schup:uploaderror', { id: _this.id, title: _this.Title, filename: _this.Filename, Error: error });
        } else {
          _this.template.trigger('schup:uploaded', { id: _this.id, title: _this.Title, filename: _this.Filename });
        }
      });
    }
  }, {
    key: 'updateButtonStatus',
    value: function updateButtonStatus() {
      if (this.canUploadable) $('button.upload', this.template).removeAttr('disabled');else $('button.upload', this.template).attr('disabled', 'disabled');

      if (this.canUploadCancel) $('button.cancel', this.template).removeAttr('disabled');else $('button.cancel', this.template).attr('disabled', 'disabled');
    }
  }, {
    key: 'setLocalEventHandler',
    value: function setLocalEventHandler() {
      var _this2 = this;

      $('input[name=title]', this.template).on('blur keypress keyup', function (evt) {
        return _this2.handleTitleValidate(evt);
      });
      $('button.upload', this.template).on('click', function (evt) {
        return _this2.handleUploadButtonClick(evt);
      });
      $('button.cancel', this.template).on('click', function (evt) {
        return _this2.handleCancelButtonClick(evt);
      });
      $('input[name=overwrite]', this.template).on('change', function (evt) {
        return _this2.handleOverwriteCheckChanged(evt);
      });
    }
  }, {
    key: 'handleTitleValidate',
    value: function handleTitleValidate(evt) {
      if (this.isValidatedTitle) {
        $('.form-group.title', this.template).removeClass('has-danger');
        $('input[name=title]', this.template).removeClass('form-control-danger');
      } else {
        $('.form-group.title', this.template).addClass('has-danger');
        $('input[name=title]', this.template).addClass('form-control-danger');
      }
      this.updateButtonStatus();
    }
  }, {
    key: 'handleOverwriteCheckChanged',
    value: function handleOverwriteCheckChanged(evt) {
      this.updateButtonStatus();
    }
  }, {
    key: 'handleCancelButtonClick',
    value: function handleCancelButtonClick(evt) {
      this.template.trigger('schup:canceled', { id: this.id });
    }
  }, {
    key: 'handleUploadButtonClick',
    value: function handleUploadButtonClick(evt) {
      var _this3 = this;

      this.uploading = true;
      this.updateButtonStatus();

      var props = {
        title: this.Title,
        description: this.Description
      };

      var delkey = this.DeleteKey;
      if (delkey && delkey != '') {
        // 何か文字が含まれてたら16進数化してプロパティ追加
        props['delete_key'] = getHashedDeleteKey(delkey);
      }

      if (this.EnabledDeleteKey) {
        showDeleteKeyDialog(this.Title, true, function (inputDeleteKey) {
          props['overwrite_key'] = getHashedDeleteKey(inputDeleteKey);
          _this3.performUpload(_this3.filedata, props);
        });
      } else this.performUpload(this.filedata, props);

      this.uploading = false;
      this.updateButtonStatus();
    }
  }, {
    key: 'setEventCancel',
    value: function setEventCancel(handler) {
      this.template.on('schup:canceled', handler);
    }
  }, {
    key: 'setEventUploaded',
    value: function setEventUploaded(handler) {
      this.template.on('schup:uploaded', handler);
    }
  }, {
    key: 'setEventUploadError',
    value: function setEventUploadError(handler) {
      this.template.on('schup:uploaderror', handler);
    }
  }, {
    key: 'canUploadable',
    get: function get() {
      var uploadable = true;

      if (!this.isValidatedTitle) uploadable = false;
      if (this.isDuplicated && !this.isOverwrite) uploadable = false;
      if (this.isUploading) uploadable = false;

      return uploadable;
    }
  }, {
    key: 'canUploadCancel',
    get: function get() {
      var canCancel = true;

      if (this.isUploading) canCancel = false;

      return canCancel;
    }
  }, {
    key: 'isValidatedTitle',
    get: function get() {
      return this.Title.length > 0;
    }
  }, {
    key: 'isDuplicated',
    get: function get() {
      return !!this.duplicateFile;
    }
  }, {
    key: 'isOverwrite',
    get: function get() {
      return !!$('input[name=overwrite]:checked', this.template).val();
    }
  }, {
    key: 'isUploading',
    get: function get() {
      return this.uploading; // TODO: 状態遷移を実装
    }
  }, {
    key: 'Id',
    set: function set(id) {
      this.id = id;
    },
    get: function get() {
      return this.id;
    }
  }, {
    key: 'Filename',
    set: function set(filename) {
      this.newFilename = filename;
    },
    get: function get() {
      return this.newFilename ? this.newFilename : this.filedata.name;
    }
  }, {
    key: 'Title',
    get: function get() {
      return $('input[name=title]', this.template).val();
    }
  }, {
    key: 'Description',
    get: function get() {
      return $('textarea[name=description]', this.template).val();
    }
  }, {
    key: 'DeleteKey',
    get: function get() {
      return $('input[name=delete_key]', this.template).val();
    }
  }, {
    key: 'DuplicateFile',

    // 同名ファイルが存在してる場合にtrueに設定
    set: function set(file) {
      this.duplicateFile = file;

      if (this.isDuplicated) {
        $('label.overwrite', this.template).show();
      } else {
        $('label.overwrite', this.template).hide();
      }
    }
  }, {
    key: 'EnabledDeleteKey',
    set: function set(flag) {
      this.enabledDeleteKey = flag;
    },
    get: function get() {
      return this.enabledDeleteKey;
    }
  }]);

  return UploadSchematicItem;
})();

// テンプレートの初期読み込み
UploadSchematicItem.loadSUITemplate();
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var DragAndDropUploader = (function () {
  function DragAndDropUploader() {
    _classCallCheck(this, DragAndDropUploader);

    this.schUploadItemTemplate = null;
    this.uploadFilesCache = [];
  }

  _createClass(DragAndDropUploader, [{
    key: 'handleFileSelect',
    value: function handleFileSelect(evt) {
      evt.target.className = '';
      evt.stopPropagation();
      evt.preventDefault();

      for (var i = 0, f; f = evt.originalEvent.dataTransfer.files[i]; i++) {
        this.uploadFilesCache.push(f);
      }

      this.renderOutput();
    }
  }, {
    key: 'handleDragOver',
    value: function handleDragOver(evt) {
      evt.target.className = 'hover';
      evt.stopPropagation();
      evt.preventDefault();
      evt.originalEvent.dataTransfer.dropEffect = 'link'; // Explicitly show this is a copy.
    }
  }, {
    key: 'handleDragLeave',
    value: function handleDragLeave(evt) {
      this.className = '';
    }
  }, {
    key: 'initializer',
    value: function initializer() {
      var _this = this;

      // Setup the dnd listeners.
      var dropZone = $('#drop-zone');
      dropZone.on('dragover', function (evt) {
        return _this.handleDragOver(evt);
      });
      dropZone.on('dragleave', function (evt) {
        return _this.handleDragLeave(evt);
      });
      dropZone.on('drop', function (evt) {
        return _this.handleFileSelect(evt);
      });
    }
  }, {
    key: 'renderOutput',
    value: function renderOutput() {
      var _this2 = this;

      // files is a FileList of File objects. List some properties.
      var output = [];
      var fileList = SchematicsListController.GetFileInfos();
      for (var i = 0, file; file = this.uploadFilesCache[i]; i++) {
        var itemNode = new UploadSchematicItem(i, file);

        // イベント設定
        itemNode.setEventCancel(function (evt, data) {
          _this2.uploadFilesCache.splice(data.id, 1);
          _this2.renderOutput();
        });
        itemNode.setEventUploaded(function (evt, data) {
          SchematicsListController.ReloadList();
          _this2.uploadFilesCache.splice(data.id, 1);
          _this2.renderOutput();
          swal(data.title + 'のアップロードが完了しました', '', 'success');
        });
        itemNode.setEventUploadError(function (evt, data) {
          var errmsg = '';
          if (data.Error.response.status == 403) {
            errmsg = '上書きが出来ませんでした。削除キーが一致しません。';
          }
          swal(data.title + 'のアップロードに失敗しました。', errmsg, 'error');
        });

        // 同名ファイルが一覧に存在する場合は上書きチェックを表示
        var index = fileList.map(function (info) {
          return info.name;
        }).indexOf(file.name);
        if (index >= 0) {
          itemNode.DuplicateFile = file;
          itemNode.EnabledDeleteKey = fileList[index].enabledDeleteKey;
        }

        output.push(itemNode.getJQueryObject());
      }
      $('output#list').html('<ul class="container-fluid"></ul>');
      $('output#list ul').append(output);
    }
  }]);

  return DragAndDropUploader;
})();

var dadUploader = new DragAndDropUploader();
dadUploader.initializer();
'use strict';

function getHashedDeleteKey(rawkey) {
  if (!rawkey) return '';
  var shainfo = CryptoJS.SHA256(rawkey);
  var hashstr = '';
  for (var i = 0; i < shainfo.words.length; i++) {
    hashstr += (shainfo.words[i] >>> 0).toString(16);
  }
  return hashstr;
}

function escapeHtml(content) {
  var TABLE_FOR_ESCAPE_HTML = {
    '&': '&amp;',
    '"': '&quot;',
    '<': '&lt;',
    '>': '&gt;'
  };
  return content.replace(/[&"<>]/g, function (match) {
    return TABLE_FOR_ESCAPE_HTML[match];
  });
}

function getDateStringFromUTCMillis(millisec) {
  var date = new Date(millisec);
  return [date.getFullYear(), date.getMonth() + 1, date.getDate()].join('/') + ' ' + date.toLocaleTimeString();
}

function showDeleteKeyDialog(filename, isOverwrite, callback) {
  if (isOverwrite === undefined) isOverwrite = false;

  if (arguments.length == 2) {
    if (typeof isOverwrite === 'function') {
      callback = isOverwrite;
      isOverwrite = false;
    }
  }
  var msg = isOverwrite ? '上書き' : '削除';
  swal({
    title: msg + '確認',
    text: '<strong>' + filename + '</strong>を' + msg + 'してもよろしいですか？<p><small style="font-size:9pt">※ 未記入の場合は削除キー未登録のアイテムのみ' + msg + 'できます。</small></p>',
    type: 'input',
    html: true,
    customClass: 'sa-delete-key-input',
    showCancelButton: true,
    cancelButtonText: 'キャンセル',
    confirmButtonColor: '#DD6B55',
    confirmButtonText: msg + 'するよ!',
    inputPlaceholder: '削除キーを入力してください。'
  }, function (inputValue) {
    if (false !== inputValue) if (typeof callback === 'function') callback(inputValue);
  });
}
;'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

$('#sch-files').bootstrapTable({
  toolbar: '#sch-toolbar',
  sortName: 'modified_date',
  sortOrder: 'desc',
  pagination: true,
  search: true,
  onResetView: function onResetView(evt) {
    new Clipboard('.sch-command-copy', {
      text: function text(trigger) {
        return '//schem load ' + $(trigger).data('filename');
      }
    });
    $('.sch-file-delete').on('click', function () {
      var filename = $(this).data('filename');
      showDeleteKeyDialog(filename, function (inputDeleteKey) {
        schematicsAPI.deleteFile(filename, inputDeleteKey, function (err, response) {
          setTimeout(function () {
            if (err) swal(filename + 'の削除に失敗しました', '挙動おかしい時は鯖管に教えてあげてね', 'error');else {
              swal(response.data.file.filename + 'を削除しました', '', 'success');
              SchematicsListController.ReloadList();
            }
          }, 500);
        });
      });
    });
  },
  columns: [{ title: '名前', field: 'title', sortable: true }, { title: 'ファイル名', field: 'filename', 'class': 'small', sortable: true }, { title: '更新日時', field: 'modified_date', 'class': 'small', sortable: true,
    formatter: function formatter(param, record, id) {
      if (!param || param < 1) return '';

      return getDateStringFromUTCMillis(param);
    }
  }, { title: '詳細', field: 'description', 'class': 'small' }, { title: '操作', field: 'dropdown',
    formatter: function formatter(param, record, id) {
      // TODO: 結合重いはずだからテンプレート化する
      var dropdowns = $('<div></div>');
      dropdowns.append('<div class="btn-group btn-group-sm"></div>');
      $('.btn-group', dropdowns).append('<button type="button" class="btn btn-secondary btn-no-outline sch-command-copy" data-filename="' + record.filename + '"><small>コマンドをコピー</small><i class="fa fa-clipboard" aria-hidden="true"></i></button>');
      $('.btn-group', dropdowns).append('<button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="sr-only">Toggle Dropdown</span></button>');
      $('.btn-group', dropdowns).append('<div class="dropdown-menu"></div>');
      $('.dropdown-menu', dropdowns).append('<h6 class="dropdown-header">その他操作</h6>');
      $('.dropdown-menu', dropdowns).append('<a class="dropdown-item" href="' + schematicsAPI.getDownloadURL(record.filename) + '">ダウンロード <i class="fa fa-download" aria-hidden="true" /></a>');
      $('.dropdown-menu', dropdowns).append('<a class="dropdown-item sch-file-delete" href="#" data-filename="' + record.filename + '">削除 <i class="fa fa-trash" aria-hidden="true" /></a>');

      return dropdowns.html();
    }
  }],
  onRefresh: function onRefresh() {
    schematicsAPI.reload(function (error, data) {
      SchematicsListController.UpdateData(data);
      lastUpdateTime = Date.now();startUTDisplay();
    });
  }
});

var schUTDisplay = $('#sch-toolbar > span.updated-time')[0];
var schUTUpdateTimer = null;
function startUTDisplay() {
  // 多重起動防止
  if (schUTUpdateTimer != null) return;

  schUTUpdateTimer = setInterval(function () {
    if (lastUpdateTime < 1) schUTDisplay.textContent = '';else if (Date.now() - lastUpdateTime > 3600000) {
      schUTDisplay.innerHTML = '<span class="text-warning">下記のリストは1時間以上更新されていません。</span>';
      clearInterval(schUTUpdateTimer);
      schUTUpdateTimer = null;
    } else {
      var time = Math.floor((Date.now() - lastUpdateTime) / 1000);
      if (time > 300) time = '<span class="text-warning">' + time + '秒</span>';else time += '秒';
      schUTDisplay.innerHTML = '最終更新から ' + time + ' 経過しています。';
    }
  }, 500);
}

var SchematicsListController = (function () {
  function SchematicsListController() {
    _classCallCheck(this, SchematicsListController);
  }

  _createClass(SchematicsListController, null, [{
    key: 'TableInitialize',
    value: function TableInitialize() {
      // ページ表示時に1回リロード(refresh)を行う
      SchematicsListController.ReloadList();

      // 更新ボタンのイベントを設定(クリック時1秒間更新ボタンを無効化)
      $('#sch-toolbar > button.refresh').on('click', function (evt) {
        $('#sch-toolbar > button.refresh').attr('disabled', 'disabled');
        SchematicsListController.ReloadList();
        setTimeout(function () {
          return $('#sch-toolbar > button.refresh').removeAttr('disabled');
        }, 1000);
      });
    }
  }, {
    key: 'ReloadList',

    // ファイルリストの更新を行う(BootstrapTableのrefreshイベント)
    value: function ReloadList() {
      $('#sch-files').bootstrapTable('refresh');
    }
  }, {
    key: 'UpdateData',
    value: function UpdateData(original) {
      var sf = $('#sch-files');

      // 現在のデータを一旦削除
      sf.bootstrapTable('removeAll');

      original.forEach(function (d) {
        // 1レコードずつ内容を補完しつつ追加
        sf.bootstrapTable('append', Object.assign({
          // カラムに合わせて初期値を設定
          title: '', filename: '', upload_date: 0, description: '', dropdown: ''
        }, d));
      });
    }
  }, {
    key: 'GetFileInfos',
    value: function GetFileInfos() {
      return $('#sch-files').bootstrapTable('getData').map(function (record) {
        return { name: record.original_name, enabledDeleteKey: record.enabled_delete_key };
      });
    }
  }]);

  return SchematicsListController;
})();

SchematicsListController.TableInitialize();
//@prepros-prepend "_config.js"
//@prepros-prepend "_apicall.js"
//@prepros-prepend "_upload_item.js"
//@prepros-prepend "_filedrag.js"
//@prepros-prepend "_common_utils.js"
//@prepros-prepend "_schematic_list.js"

// Global Data
"use strict";

var lastUpdateTime = -1;
var schUploadItemTemplate = null;
//# sourceMappingURL=app.min.js.map